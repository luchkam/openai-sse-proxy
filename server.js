const express = require('express');
const axios = require('axios');
const cors = require('cors');
require('dotenv').config();

const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use((req, res, next) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  next();
});

app.use(cors());
app.use(express.json());

// –ö–ª—é—á–∏ API Tourvisor (–ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const TOURVISOR_AUTH = {
  authlogin: process.env.TOURVISOR_LOGIN || 'info@meridiantt.com',
  authpass: process.env.TOURVISOR_PASS || 'Mh4GdKPUtwZT'
};

// 1. –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–¥–∞
app.get('/new-thread', async (req, res) => {
  try {
    const response = await axios.post(
      'https://api.openai.com/v1/threads',
      {},
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'OpenAI-Beta': 'assistants=v2',
        },
      }
    );
    res.json({ thread_id: response.data.id });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–¥–∞:', err.message);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å thread_id' });
  }
});

// 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async function getTourvisorResults(requestId) {
  const baseUrl = 'http://tourvisor.ru/xml/result.php';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞ (–º–∞–∫—Å 10 —Å–µ–∫—É–Ω–¥)
  const statusUrl = `${baseUrl}?${new URLSearchParams({
    ...TOURVISOR_AUTH,
    requestid: requestId,
    type: 'status',
    format: 'json'
  })}`;

  let attempts = 0;
  while (attempts < 5) {
    try {
      const statusRes = await axios.get(statusUrl);
      if (statusRes.data?.status?.state === 'finished') break;
      await new Promise(r => setTimeout(r, 2000));
      attempts++;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', err.message);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ (–º–∞–∫—Å 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
  const results = [];
  for (let page = 1; page <= 3; page++) {
    try {
      const resultUrl = `${baseUrl}?${new URLSearchParams({
        ...TOURVISOR_AUTH,
        requestid: requestId,
        format: 'json',
        page: page,
        onpage: 10 // –õ–∏–º–∏—Ç 10 –æ—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      })}`;

      const resultRes = await axios.get(resultUrl);
      const hotels = resultRes.data?.result?.hotel;
      
      if (!hotels || !hotels.length) break;
      results.push(...hotels);
      
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}:`, err.message);
      break;
    }
  }

  return results;
}

// 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ function call –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
async function handleFunctionCall(threadId, funcCall) {
  if (funcCall.name !== 'search_tours') return null;

  try {
    const args = JSON.parse(funcCall.arguments);
    console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:', args);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –≤ Tourvisor
    const searchUrl = `http://tourvisor.ru/xml/search.php?${new URLSearchParams({
      ...TOURVISOR_AUTH,
      departure: args.departure,
      country: args.country,
      datefrom: args.datefrom,
      dateto: args.dateto,
      nightsfrom: args.nightsfrom || 7,
      nightsto: args.nightsto || 10,
      adults: args.adults || 2,
      child: args.child || 0,
      format: 'json'
    })}`;

    const searchRes = await axios.get(searchUrl);
    const requestId = searchRes.data?.result?.requestid;
    if (!requestId) return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const hotels = await getTourvisorResults(requestId);
    if (!hotels?.length) return 'üòû –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Ç—É—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.';

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ø-3 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö —Ç—É—Ä–∞
    const allTours = hotels.flatMap(h => 
      Array.isArray(h.tours?.tour) ? h.tours.tour : [h.tours?.tour].filter(Boolean)
    );

    const topTours = allTours
      .sort((a, b) => a.price - b.price)
      .slice(0, 3);

    // –ö—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
    return topTours.map((tour, i) => 
      `${i + 1}. üè® ${tour.hotelname || '–û—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `   ‚úàÔ∏è ${tour.flydate}, ${tour.nights} –Ω–æ—á–µ–π\n` +
      `   üçΩ ${tour.mealrussian || '–ü–∏—Ç–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `   üí∞ –û—Ç ${tour.price?.toLocaleString() || '---'} KZT`
    ).join('\n\n');

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ search_tours:', err.message);
    return '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.';
  }
}

// 4. –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞
app.get('/ask', async (req, res) => {
  const { message, thread_id } = req.query;
  
  if (!thread_id) {
    return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç thread_id' });
  }

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSE-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  res.setHeader('Content-Type', 'text/event-stream');
  res.setHeader('Cache-Control', 'no-cache');
  res.setHeader('Connection', 'keep-alive');

  const sendEvent = (data) => res.write(`data: ${JSON.stringify(data)}\n\n`);
  let isFunctionCall = false;

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º run –≤ OpenAI
    const run = await axios.post(
      `https://api.openai.com/v1/threads/${thread_id}/runs`,
      {
        assistant_id: process.env.ASSISTANT_ID,
        stream: true,
        additional_messages: [{ role: 'user', content: message }],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'OpenAI-Beta': 'assistants=v2',
        },
        responseType: 'stream',
      }
    );

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç OpenAI
    run.data.on('data', (chunk) => {
      const lines = chunk.toString().split('\n');
      
      for (const line of lines) {
        if (!line.startsWith('data: ')) continue;
        const jsonStr = line.slice(6);
        
        try {
          if (jsonStr === '[DONE]') return;
          
          const data = JSON.parse(jsonStr);
          if (data.function_call) {
            isFunctionCall = true;
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º function call –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            handleFunctionCall(thread_id, data.function_call)
              .then(result => {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
                return axios.post(
                  `https://api.openai.com/v1/threads/${thread_id}/messages`,
                  {
                    role: 'function',
                    name: data.function_call.name,
                    content: result || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                  },
                  {
                    headers: {
                      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
                      'OpenAI-Beta': 'assistants=v2',
                    },
                  }
                );
              })
              .then(() => {
                // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π run –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
                return axios.post(
                  `https://api.openai.com/v1/threads/${thread_id}/runs`,
                  {
                    assistant_id: process.env.ASSISTANT_ID,
                    stream: true,
                  },
                  {
                    headers: {
                      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
                      'OpenAI-Beta': 'assistants=v2',
                    },
                    responseType: 'stream',
                  }
                );
              })
              .then(newRun => {
                newRun.data.on('data', (chunk) => {
                  const lines = chunk.toString().split('\n');
                  lines.forEach(line => {
                    if (line.startsWith('data: ')) {
                      sendEvent(JSON.parse(line.slice(6)));
                    }
                  });
                });
              })
              .catch(err => {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ function call:', err);
                sendEvent({ error: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤' });
              });
          } else if (!isFunctionCall && data.delta?.content) {
            sendEvent(data);
          }
        } catch (err) {
          console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', err.message);
        }
      }
    });

    run.data.on('end', () => {
      if (!isFunctionCall) {
        sendEvent('[DONE]');
        res.end();
      }
    });

  } catch (err) {
    console.error('üî• –û—à–∏–±–∫–∞ –≤ /ask:', err.message);
    sendEvent({ error: err.message });
    res.end();
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
