const express = require('express');
const axios = require('axios');
const cors = require('cors');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

// Endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
app.get('/new-thread', async (req, res) => {
  process.stdout.write('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞...\n');
  try {
    const response = await axios.post(
      'https://api.openai.com/v1/threads',
      {},
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'OpenAI-Beta': 'assistants=v2',
        },
      }
    );
    process.stdout.write(`–ù–æ–≤—ã–π thread_id —Å–æ–∑–¥–∞–Ω: ${response.data.id}\n`);
    res.json({ thread_id: response.data.id });
  } catch (err) {
    process.stdout.write(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ thread_id: ${err.message}\n`);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å thread_id' });
  }
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
const getExchangeRate = async (from, to, amount = 1) => {
  try {
    const response = await axios.get('https://api.exchangerate.host/convert', {
      params: {
        access_key: process.env.EXCHANGE_API_KEY,
        from,
        to,
        amount
      }
    });

    if (response.data && response.data.result) {
      return {
        from,
        to,
        message: `1 ${from} = ${response.data.result / amount} ${to}`,
      };
    } else {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API');
    }
  } catch (error) {
    process.stdout.write(`–û—à–∏–±–∫–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç: ${error.message}\n`);
    return { from, to, message: `1 ${from} = undefined ${to}` };
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
const getWeather = async (location, unit) => {
  try {
    const geoResponse = await axios.get(
      `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(location)}&count=1`
    );
    process.stdout.write(`üåç –ì–µ–æ–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(geoResponse.data)}\n`);

    const { latitude, longitude } = geoResponse.data.results[0];

    const weatherResponse = await axios.get(
      `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,wind_speed_10m&temperature_unit=${unit === 'c' ? 'celsius' : 'fahrenheit'}`
    );

    return {
      temperature: weatherResponse.data.current.temperature_2m,
      wind_speed: weatherResponse.data.current.wind_speed_10m,
      unit: unit === 'c' ? '¬∞C' : '¬∞F',
      location: location,
    };
  } catch (error) {
    process.stdout.write(`–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: ${error.message}\n`);
    return { error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞." };
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤
     const searchFlights = async (origin, destination, depart_date, return_date = null) => {
  try {
    const params = {
      origin,
      destination,
      departure_at: depart_date,
      currency: 'KZT',
      market: 'kz',
      limit: 30,
      token: process.env.TRAVELPAYOUTS_API_KEY
    };

    if (return_date) {
      params.return_at = return_date;
      params.one_way = false;
    } else {
      params.one_way = true;
    }

    process.stdout.write(`üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Travelpayouts (prices_for_dates) —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: ${JSON.stringify(params)}\n`);

    let response = await axios.get('https://api.travelpayouts.com/aviasales/v3/prices_for_dates', { params });
    let tickets = response.data.data || [];

    // –ï—Å–ª–∏ –±–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –ø—Ä–æ–±—É–µ–º fallback
    if (!tickets.length) {
      process.stdout.write('‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ prices_for_dates ‚Äî –ø—Ä–æ–±—É–µ–º get_latest_prices\n');

      const fallbackParams = {
        origin,
        destination,
        beginning_of_period: depart_date,
        period_type: 'month',
        one_way: !return_date,
        currency: 'KZT',
        token: process.env.TRAVELPAYOUTS_API_KEY
      };

      const fallbackRes = await axios.get('https://api.travelpayouts.com/aviasales/v3/get_latest_prices', { params: fallbackParams });
      tickets = fallbackRes.data.data || [];
    }

    process.stdout.write(`üì• –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: ${tickets.length}\n`);

    const formatDate = (isoString) => {
      const [datePart] = isoString.split('T');
      const [year, month, day] = datePart.split('-');
      return `${day}${month}`;
    };

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ
    tickets.sort((a, b) => a.price - b.price);

    // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const seen = new Set();
    const uniqueTickets = [];
    for (const ticket of tickets) {
      const key = `${ticket.departure_at}_${ticket.return_at}_${ticket.price}`;
      if (!seen.has(key)) {
        seen.add(key);
        uniqueTickets.push(ticket);
      }
    }

    const finalTickets = uniqueTickets.slice(0, 3).map(ticket => ({
  price: ticket.price,
  airline: ticket.airline,
  departure_at: ticket.departure_at,
  return_at: ticket.return_at,
  transfers: ticket.transfers,
  link: `https://aviasales.kz/search/${origin}${formatDate(ticket.departure_at)}${destination}${ticket.return_at ? formatDate(ticket.return_at) : ''}1?marker=${process.env.TRAVELPAYOUTS_MARKER}`
}));

    return { tickets: finalTickets };
  } catch (error) {
    process.stdout.write(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤: ${error.message}\n`);
    return { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–≤–∏–∞–±–∏–ª–µ—Ç–∞–º.' };
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ Tourvisor
const searchTours = async (params) => {
  try {
    const searchUrl = 'http://tourvisor.ru/xml/search.php';
    const statusUrl = 'http://tourvisor.ru/xml/result.php';

    // –®–∞–≥ 1: –∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ requestid
    const searchRes = await axios.get(searchUrl, {
      params: {
        ...params,
        authlogin: process.env.TOURVISOR_LOGIN,
        authpass: process.env.TOURVISOR_PASS,
        format: 'json'
      }
    });

    const requestid = searchRes.data?.result?.requestid;
    if (!requestid) throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω requestid');

    process.stdout.write(`üì© –ü–æ–ª—É—á–µ–Ω requestid: ${requestid}\n`);

    // –®–∞–≥ 2: –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ (–¥–æ 7 —Å–µ–∫—É–Ω–¥, –º–∞–∫—Å–∏–º—É–º 4 –ø–æ–ø—ã—Ç–∫–∏ —Å –ø–∞—É–∑–æ–π 2 —Å–µ–∫)
    let status, done = false;
    for (let i = 0; i < 4; i++) {
      await new Promise(res => setTimeout(res, 2000)); // –ü–∞—É–∑–∞ 2 —Å–µ–∫
      const statusRes = await axios.get(statusUrl, {
        params: {
          authlogin: process.env.TOURVISOR_LOGIN,
          authpass: process.env.TOURVISOR_PASS,
          requestid,
          type: 'status',
          format: 'json'
        }
      });
      status = statusRes.data?.status;
      process.stdout.write(`üîÑ –°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞: ${JSON.stringify(status)}\n`);
      if (status?.state === 'finished') {
        done = true;
        break;
      }
    }

    // –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const resultRes = await axios.get(statusUrl, {
      params: {
        authlogin: process.env.TOURVISOR_LOGIN,
        authpass: process.env.TOURVISOR_PASS,
        requestid,
        type: 'result',
        format: 'json',
        onpage: 10
      }
    });

    const hotels = resultRes.data?.result?.hotel || [];
    const top3 = hotels.slice(0, 3); // –ø–µ—Ä–≤—ã–µ 3 –æ—Ç–µ–ª—è (–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º –º–µ–Ω—è—Ç—å –ª–æ–≥–∏–∫—É)

    process.stdout.write(`üì¶ –ù–∞–π–¥–µ–Ω–æ –æ—Ç–µ–ª–µ–π: ${hotels.length}\n`);

    return { tours: top3 };
  } catch (err) {
    process.stdout.write(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤: ${err.message}\n`);
    return { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç—É—Ä–∞–º.' };
  }
};

// SSE endpoint
app.get('/ask', async (req, res) => {
  const userMessage = req.query.message;
  const threadId = req.query.thread_id;

  if (!threadId) {
    process.stdout.write('‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç thread_id\n');
    return res.status(400).json({ error: 'thread_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
  }

  res.setHeader('Content-Type', 'text/event-stream');
  res.setHeader('Cache-Control', 'no-cache');
  res.setHeader('Connection', 'keep-alive');

  process.stdout.write(`üì® –ó–∞–ø—Ä–æ—Å –∫ OpenAI —Å thread_id: ${threadId}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${userMessage}\n`);

  try {
    const run = await axios.post(
      `https://api.openai.com/v1/threads/${threadId}/runs`,
      {
        assistant_id: process.env.ASSISTANT_ID,
        stream: false,
        additional_messages: [{ role: 'user', content: userMessage }],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'OpenAI-Beta': 'assistants=v2',
        },
      }
    );

    // ‚è≥ –¢–∞–π–º–µ—Ä-–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç
setTimeout(async () => {
  process.stdout.write('‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–ø—É—Å—Ç—è 10 —Å–µ–∫—É–Ω–¥...\n');
  try {
    const messagesRes = await axios.get(
      `https://api.openai.com/v1/threads/${threadId}/messages`,
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'OpenAI-Beta': 'assistants=v2',
        },
      }
    );

    const last = messagesRes.data.data.find((m) => m.role === 'assistant');
    if (last) {
      process.stdout.write('‚úÖ –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤—Å—ë-—Ç–∞–∫–∏ –ø–æ—è–≤–∏–ª—Å—è –ø–æ–∑–∂–µ\n');
    } else {
      process.stdout.write('‚ö†Ô∏è –û—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç –¥–∞–∂–µ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞\n');
    }
  } catch (err) {
    process.stdout.write(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: ${err.message}\n`);
  }
}, 10000); // 10 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è, –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 12000‚Äì15000 –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    const runId = run.data.id;

    let completed = false;
    while (!completed) {
      const statusRes = await axios.get(
        `https://api.openai.com/v1/threads/${threadId}/runs/${runId}`,
        {
          headers: {
            Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
            'OpenAI-Beta': 'assistants=v2',
          },
        }
      );

      if (statusRes.data.status === 'completed') {
        completed = true;
        break;
      } else if (statusRes.data.status === 'requires_action') {
        const toolCalls = statusRes.data.required_action.submit_tool_outputs.tool_calls;
        const outputs = [];

        for (const call of toolCalls) {
          if (call.function.name === 'get_weather') {
            let args;
            try {
              args = JSON.parse(call.function.arguments);
            } catch (err) {
              process.stdout.write(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ arguments: ${err.message}\n`);
              continue;
            }

            const weather = await getWeather(args.location, args.unit);
            outputs.push({
              tool_call_id: call.id,
              output: JSON.stringify(weather),
            });
          }

          if (call.function.name === 'get_exchange_rate') {
            let args;
            try {
              args = JSON.parse(call.function.arguments);
            } catch (err) {
              process.stdout.write(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ arguments: ${err.message}\n`);
              continue;
            }

            const amount = args.amount || 1;
            const rate = await getExchangeRate(args.from, args.to, amount);
            outputs.push({
              tool_call_id: call.id,
              output: JSON.stringify(rate),
            });
          }

          if (call.function.name === 'search_flights') {
            let args;
            try {
              args = JSON.parse(call.function.arguments);
              process.stdout.write(`üßæ –ê—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: ${JSON.stringify(args)}\n`);
            } catch (err) {
              process.stdout.write(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ arguments: ${err.message}\n`);
              continue;
            }

            const flights = await searchFlights(args.origin, args.destination, args.depart_date, args.return_date);  
            outputs.push({
              tool_call_id: call.id,
              output: JSON.stringify(flights),
            });
          }

          if (call.function.name === 'search_tours') {
            let args;
            try {
              args = JSON.parse(call.function.arguments);
              process.stdout.write(`üßæ –ê—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: ${JSON.stringify(args)}\n`);
            } catch (err) {
              process.stdout.write(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ arguments: ${err.message}\n`);
              continue;
            }

            const tours = await searchTours(args);
            outputs.push({
              tool_call_id: call.id,
              output: JSON.stringify(tours),
            });
          }
        }

        try {
          process.stdout.write(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ tool_outputs: ${JSON.stringify(outputs)}\n`);
          await axios.post(
            `https://api.openai.com/v1/threads/${threadId}/runs/${runId}/submit_tool_outputs`,
            { tool_outputs: outputs },
            {
              headers: {
                Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
                'OpenAI-Beta': 'assistants=v2',
              },
            }
          );
          process.stdout.write('‚úÖ submit_tool_outputs —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã\n');
        } catch (err) {
          process.stdout.write(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ tool_outputs: ${err.message}\n`);
        }
      } else {
        await new Promise((r) => setTimeout(r, 1000));
      }
    }

    const messagesRes = await axios.get(
      `https://api.openai.com/v1/threads/${threadId}/messages`,
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'OpenAI-Beta': 'assistants=v2',
        },
      }
    );

    process.stdout.write(`üßæ –í–°–ï –°–û–û–ë–©–ï–ù–ò–Ø –í –ü–û–¢–û–ö–ï: ${JSON.stringify(messagesRes.data)}\n`);

    const last = messagesRes.data.data.find((m) => m.role === 'assistant');
    process.stdout.write(`üì§ –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: ${JSON.stringify(last)}\n`);
    res.write(`data: ${JSON.stringify(last)}\n\n`);
    res.write('data: [DONE]\n\n');
    res.end();
    process.stdout.write('‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω\n');
  } catch (error) {
    process.stdout.write(`‚ùå –û—à–∏–±–∫–∞ –≤ /ask: ${error.message}\n`);
    res.write(`data: {"error":"${error.message}"}\n\n`);
    res.end();
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  process.stdout.write(`‚úÖ SSE Proxy Server listening on port ${PORT}\n`);
});
