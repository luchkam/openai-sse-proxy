const express = require('express');
const axios = require('axios');
const cors = require('cors');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

// –ù–æ–≤—ã–π endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞
app.get('/new-thread', async (req, res) => {
  process.stdout.write('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞...\n'); // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ
  try {
    const response = await axios.post(
      'https://api.openai.com/v1/threads',
      {},
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'OpenAI-Beta': 'assistants=v2',
        },
      }
    );
    process.stdout.write(`–ù–æ–≤—ã–π thread_id —Å–æ–∑–¥–∞–Ω: ${response.data.id}\n`); // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.json({ thread_id: response.data.id });
  } catch (err) {
    process.stdout.write(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ thread_id: ${err.message}\n`); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å thread_id' });
  }
});

// SSE endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –æ—Ç–≤–µ—Ç–∞
app.get('/ask', async (req, res) => {
  const userMessage = req.query.message;
  const threadId = req.query.thread_id;

  if (!threadId) {
    process.stdout.write('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç thread_id\n'); // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ thread_id
    res.status(400).json({ error: 'thread_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
    return;
  }

  res.setHeader('Content-Type', 'text/event-stream');
  res.setHeader('Cache-Control', 'no-cache');
  res.setHeader('Connection', 'keep-alive');

  process.stdout.write(`–ó–∞–ø—Ä–æ—Å –∫ OpenAI —Å thread_id: ${threadId}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${userMessage}\n`); // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞

  try {
    const run = await axios.post(
      `https://api.openai.com/v1/threads/${threadId}/runs`,
      {
        assistant_id: process.env.ASSISTANT_ID,
        stream: true,
        additional_messages: [
          {
            role: 'user',
            content: userMessage,
          },
        ],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'OpenAI-Beta': 'assistants=v2',
        },
        responseType: 'stream',
      }
    );

    run.data.on('data', (chunk) => {
      const lines = chunk.toString().split('\n');
      for (const line of lines) {
        if (line.startsWith('data: ')) {
          const jsonStr = line.slice(6);
          if (jsonStr !== '[DONE]') {
            res.write(`data: ${jsonStr}\n\n`);
            process.stdout.write(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${jsonStr}\n`); // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
          }
        }
      }
    });

    run.data.on('end', () => {
      res.write('data: [DONE]\n\n');
      res.end();
      process.stdout.write('–ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω\n'); // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
    });

  } catch (error) {
    process.stdout.write(`–û—à–∏–±–∫–∞ –≤ /ask: ${error.message}\n`); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    console.error('–û—à–∏–±–∫–∞ –≤ /ask:', error.message);
    res.write(`data: {"error":"${error.message}"}\n\n`);
    res.end();
  }
});

app.post('/search-tours', async (req, res) => {
  process.stdout.write('üì• –í—ã–∑–≤–∞–Ω endpoint /search-tours\n');

  // –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å body, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª OpenAI
  const rawBody = JSON.stringify(req.body, null, 2);
  process.stdout.write(`üìù –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:\n${rawBody}\n`);

  // –ü—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å tool_call_id
  try {
    const toolCall = req.body?.tool_calls?.[0];
    if (!toolCall) {
      process.stdout.write('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω tool_call –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞\n');
      return res.status(400).json({ error: 'tool_call not found' });
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    const fakeResult = `
–ù–∞–π–¥–µ–Ω–æ 3 —Ç—É—Ä–∞:
1. –¢—É—Ä –≤ –¢—É—Ä—Ü–∏—é, –æ—Ç–µ–ª—å Example Resort ‚òÖ‚òÖ‚òÖ‚òÖ ‚Äì 320 000 ‚Ç∏
2. –¢—É—Ä –≤ –¢—É—Ä—Ü–∏—é, –æ—Ç–µ–ª—å Beach Paradise ‚òÖ‚òÖ‚òÖ ‚Äì 290 000 ‚Ç∏
3. –¢—É—Ä –≤ –¢—É—Ä—Ü–∏—é, –æ—Ç–µ–ª—å Family Club ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ ‚Äì 350 000 ‚Ç∏
    `;

    res.json({
      tool_outputs: [
        {
          tool_call_id: toolCall.id,
          output: fakeResult
        }
      ]
    });

    process.stdout.write('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É\n');
  } catch (err) {
    process.stdout.write(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏: ${err.message}\n`);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ' });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  process.stdout.write(`‚úÖ SSE Proxy Server listening on port ${PORT}\n`); // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
});
