const express = require('express');
const axios = require('axios');
const cors = require('cors');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è thread —Å Assistant
app.get('/new-thread', async (req, res) => {
  process.stdout.write('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞...\n');
  try {
    const response = await axios.post(
      'https://api.openai.com/v1/threads',
      {},
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'OpenAI-Beta': 'assistants=v2',
        },
      }
    );
    process.stdout.write(`–ù–æ–≤—ã–π thread_id: ${response.data.id}\n`);
    res.json({ thread_id: response.data.id });
  } catch (err) {
    process.stdout.write(`–û—à–∏–±–∫–∞: ${err.message}\n`);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è thread' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Assistant
app.get('/ask', async (req, res) => {
  const { message, thread_id } = req.query;
  
  if (!thread_id) {
    process.stdout.write('–û—à–∏–±–∫–∞: –Ω–µ—Ç thread_id\n');
    return res.status(400).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è thread_id' });
  }

  res.setHeader('Content-Type', 'text/event-stream');
  res.setHeader('Cache-Control', 'no-cache');
  res.setHeader('Connection', 'keep-alive');

  process.stdout.write(`–ó–∞–ø—Ä–æ—Å –∫ Assistant: ${message}\n`);

  try {
    const run = await axios.post(
      `https://api.openai.com/v1/threads/${thread_id}/runs`,
      {
        assistant_id: process.env.ASSISTANT_ID,
        stream: true,
        additional_messages: [{ role: 'user', content: message }],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'OpenAI-Beta': 'assistants=v2',
        },
        responseType: 'stream',
      }
    );

    run.data.on('data', (chunk) => {
      const lines = chunk.toString().split('\n');
      lines.forEach(line => {
        if (line.startsWith('data: ')) {
          const data = line.slice(6);
          if (data !== '[DONE]') {
            res.write(`data: ${data}\n\n`);
            process.stdout.write(`–î–∞–Ω–Ω—ã–µ: ${data}\n`);
          }
        }
      });
    });

    run.data.on('end', () => {
      res.write('data: [DONE]\n\n');
      res.end();
      process.stdout.write('–ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω\n');
    });

  } catch (error) {
    process.stdout.write(`–û—à–∏–±–∫–∞: ${error.message}\n`);
    res.write(`data: {"error":"${error.message}"}\n\n`);
    res.end();
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤ (GET)
app.get('/search-tours', async (req, res) => {
  const { departureId, countryId, dateFrom, nights, adults, children = 0, stars = 0, mealCode = '' } = req.query;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  if (!departureId || !countryId || !dateFrom || !nights || !adults) {
    process.stdout.write('‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n');
    return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ departureId, countryId, dateFrom, nights, adults' });
  }

  process.stdout.write(`üîç –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤: ${JSON.stringify(req.query)}\n`);

  try {
    const searchParams = new URLSearchParams({
      authlogin: process.env.TOURVISOR_LOGIN,
      authpass: process.env.TOURVISOR_PASS,
      departure: departureId,
      country: countryId,
      datefrom: dateFrom,
      nightsto: nights,
      adults: adults,
      child: children,
      stars: stars,
      meal: mealCode,
      currency: 3, // –¢–µ–Ω–≥–µ
      format: 'json'
    });

    const searchUrl = `http://tourvisor.ru/xml/search.php?${searchParams}`;
    process.stdout.write(`üöÄ –ó–∞–ø—Ä–æ—Å –∫ Tourvisor: ${searchUrl}\n`);

    const { data: { requestid } } = await axios.get(searchUrl);
    process.stdout.write(`üÜî ID –∑–∞–ø—Ä–æ—Å–∞: ${requestid}\n`);

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    let searchData;
    for (let attempt = 0; attempt < 5; attempt++) {
      await new Promise(resolve => setTimeout(resolve, 2000));
      const { data: statusData } = await axios.get(
        `http://tourvisor.ru/xml/result.php?requestid=${requestid}&type=status&format=json`
      );

      if (statusData.status.state === 'finished') {
        process.stdout.write(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–æ–≤: ${statusData.status.toursfound}\n`);
        const { data } = await axios.get(
          `http://tourvisor.ru/xml/result.php?requestid=${requestid}&type=result&format=json`
        );
        searchData = data;
        break;
      }
    }

    if (!searchData) {
      throw new Error('Tourvisor –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ 10 —Å–µ–∫—É–Ω–¥');
    }

    // 3. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    const tours = searchData.result.hotel.slice(0, 3).map(hotel => ({
      hotel: hotel.hotelname,
      price: hotel.price,
      nights: hotel.tours[0].nights,
      date: hotel.tours[0].flydate,
      meal: hotel.tours[0].mealrussian,
      operator: hotel.tours[0].operatorname
    }));

    res.json({ tours });

  } catch (error) {
    process.stdout.write(`‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤' });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  process.stdout.write(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}\n`);
});
